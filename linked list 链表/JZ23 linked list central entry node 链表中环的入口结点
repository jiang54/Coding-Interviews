# -*- coding:utf-8 -*-
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def EntryNodeOfLoop(self, pHead):
        # write code here
        # have 2 pointer, slow speed = 1, fast speed = 2
        # when fast exist, let slow move
        # check if fast.next exist, if yes, let fast move
        # else return None
        # if fast and slow meet, which means, there are a linked list circle exist
        # so move fast back to the pHead, and change fast speed = 1
        # while fast not equal to slow
        # move fast and slow together, when they meet, that would be the start point of the circle
        slow = pHead
        fast = pHead
        while fast:
            slow = slow.next
            if fast.next:
                fast = fast.next.next
            else:
                return None
            if slow == fast:
                fast = pHead
                while fast != slow:
                    fast = fast.next
                    slow = slow.next
                return fast
        return None
